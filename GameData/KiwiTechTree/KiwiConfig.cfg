// Kiwi's Tech Tree Overhaul (General Upgrade Configurations)
// Version 2.0
// Created: 31 October 2020 for KSP 1.9.1 to 1.10.1
// Last Updated: 17 January 2021 for KSP 1.11.1
// 19 November 2020: Added general settings for Kerbalism and Engine Ignitor
// 22 November 2020: Added Science Difficulty Setting
// 23 November 2020: Added upgrade toggle switches
// 28 November 2020: Added cost multipliers for various parts (not yet implemented in-game)
// 17 January 2021: MOAR Options

// IMPORTANT NOTE: These settings are not foolproof.  Incorrect settings can break your game!!!!  Change only after you have backed up your save!
// If using a patch either do not specify a pass or use the :FIRST pass to ensure that your patch runs before any Kiwi Tech Tree patches reference them.

KIWI_GENERAL_SETTINGS
{
	RESOURCE_NAMES
	{
		CUSTOM = off			// Options: on/off Turning on will change some of the display names for stock resources and commonly used resources in CRP.  In particular it changes Liquid Fuel to LqdKerosene and MonoPropellant to Hydrazine.
	}

	UPGRADES
	{
		BATTERY = on 			// Options: on/off Turning off will disable the battery density upgrades in KTT
		ENGINE = on 			// Options: on/off Turning off will disable the engine upgrades in KTT
		FUELTANK = on 			// Options: on/off Turning off will disable the fuel tank upgrades in KTT.  This includes the composite material upgrade for SRBs.
		KERBALENGINEER = off	// Options: on/off Turning on will add Kerbal Engineer modules to all probes.
		PARACHUTE = on	 		// Options: on/off Turning off will disable the parachute upgrades in KTT. 
		RCS = on				// Options: on/off Turning off will disable the RCS upgrades in KTT. This is only relevant if Rational Resources is installed, otherwise it is disabled.
		THERMAL = on				// Options: on/off Turning off will disable the thermal tolerance upgrades in KTT.
		SAS = on				// Options: on/off Turning off will disable the Probe SAS upgrades in KTT.  Note that this result in the default SAS level for all probes and they may be out of order in the tech tree.  I will not balance accordingly.
		SOLAR = on		 		// Options: on/off Turning off will disable the solar panel upgrade system upgrades in KTT. Only relevant if Near Future Solar is installed, otherwise it is disabled.
		SPACECAPABLE = on 		// Options: on/off Turning off will disable the space capabile upgrade system upgrades in KTT.
		STRUCTURAL = on 		// Options: on/off Turning off will disable the structural parts upgrade system upgrades in KTT.
		SYSTEM = on 			// Options: on/off Turning off will disable the spaceplane system upgrades in KTT.
	}

	SCIENCE // Note: Relevant for Non-Kerbalism Installs only.
	{
		// Options:
		// stock      This will use default science experiment values used in Stock and those defined within mods
		// default    This will reduce the base value and cap for science experiments, particularly amongst science experiments that are unmanned.
		
		SCIENCEVALUES = default
	}
	
	// Hard and adaptive values are experimental and subject to change
	TECHTREE
	{
		// Options:
		// easy    		These is the default values set by Kiwi Tech Tree
		// adaptive		This will create an adaptive multiplier based on some pre-determined science-heavy mods to make it a bit more of a challenge.
		// adaptive will take # of Science Mods x Tech Tier x Multiplier and add that to the default tree cost.  Thus if you have 5 science mods with a multiplier of 1, the Tier 4 costs will be 80 + 5 x 4 x 1 = 100
		// This should make early game a bit more challenging, but prevent later game just being a huge grind.
		
		DIFFICULTY = adaptive
		MULTIPLIER = 1	// How much weight should be given to the adaptive mods.  Note that this does not impact default or hard difficulty settings. Stick to integer values!
		
		UI = 0.7 // This is the scale of the icons in the Tech Tree, would recommend reducing this if you have the UI Scale setting in KSP set to less than 150%.
	}

	KERBALISM_FEATURERELIABILITY
	{
		ENGINE_RELIABILITY = On // Maintains Feature Reliability for Kerbalism, but disables it for Engines if turned Off.
	}
	
	// Settings for when Engine Ignitor is installed alongside Kerbalism Feature Reliability
	ENGINE_IGNITOR_KERBALISM
	{
		BURN_DURATION = On // When Engine Ignitor is installed alongside Kerbalism with Feature Reliability, it will disable's Kerbalism's Ignitor within the module and use only the burn duration.  If turned off, it will disable the reliability module for engines completely.
		FAILURE_PROBABILITY = Off // This will maintain the probability that an engine can fail on start-up in addition to the random probability of failure introduced by Engine Ignitor.  Turning on will likely result in very unreliable engines.
	}
}

KIWI_RCS_SETTINGS
{
	PRIMARY = on // Options: on/off This will toggle whether RCS has different propellants to simulate development of RCS tech (ie. H202 -> Hydrazine -> Hyerpgolic).  Requires Primary RCS switch set to on.
	COLDGAS = off // Options: on/off This will toggle whether RCS has different cold gas thrusters.  Requires Primary RCS switch set to on and Rational Resources to be installed.
	
	HYDROGENPEROXIDE
	{
		THRUST_MULTIPLIER = 0.6
		ASL_ISP = 145
		VAC_ISP = 240
	}
	
	HYDRAZINE
	{
		THRUST_MULTIPLIER = 1.0
		ASL_ISP = 130
		VAC_ISP = 240
	}
	
	HYPERGOLIC
	{
		THRUST_MULTIPLIER = 1.2
		ASL_ISP = 180
		VAC_ISP = 290
	}
	
	ATM
	{
		THRUST_MULTIPLIER = 1.0
		ASL_ISP = 35
		VAC_ISP = 70
	}
	
	HYDROGEN
	{
		THRUST_MULTIPLIER = 1.0
		ASL_ISP = 136
		VAC_ISP = 272
	}
	
	NITROGEN
	{
		THRUST_MULTIPLIER = 1.0
		ASL_ISP = 36.5
		VAC_ISP = 73
	}
	
	ARGON
	{
		THRUST_MULTIPLIER = 1.0
		ASL_ISP = 26
		VAC_ISP = 52
	}
	
	XENON
	{
		THRUST_MULTIPLIER = 1.0
		ASL_ISP = 14
		VAC_ISP = 28
	}
	
	METHANE
	{
		THRUST_MULTIPLIER = 1.0
		ASL_ISP = 52.5
		VAC_ISP = 105
	}
	
	AMMONIA
	{
		THRUST_MULTIPLIER = 1.0
		ASL_ISP = 48
		VAC_ISP = 96
	}
	
	CO2
	{
		THRUST_MULTIPLIER = 1.0
		ASL_ISP = 30.5
		VAC_ISP = 61
	}
}

KIWI_ENGINE_MULTIPLIERS
{
	KEROLOX // This is for standard and Aerospike LF/O Fuel Engines
	{
		PROTOTYPE_THRUST_MULTIPLIER = 0.9
		PROTOTYPE_ISP_MULTIPLIER = 0.94
		PROTOTYPE_COST_MULTIPLIER = 0.0 // This is additive, so prototype engines cost 0% more than baseline
		PROTOTYPE_MASS_MULTIPLIER = 0.02 // This is additive, so prototype engines have 2% more mass than baseline
	
		BASELINE_ENTRYCOST_MULTIPLIER = 1.0 // This is the cost multiplier for the prototype relative to the original entry cost of the part.
		BASELINE_THRUST_MULTIPLIER = 1.0
		BASELINE_ISP_MULTIPLIER = 1.0
		
		UPGRADE_ENTRYCOST_MULTIPLIER = 1.5 // This is the cost multiplier for the upgrade relative to the original entry cost of the part.
		UPGRADE_THRUST_MULTIPLIER = 1.15 // This gives the engine 15% additional thrust when upgraded.
		UPGRADE_ISP_MULTIPLIER = 1.08 // This gives the engine 8% higher specific impulse when upgraded.
		UPGRADE_COST_MULTIPLIER = 0.5 // This is additive, so upgrades engines cost 50% more than baseline
		UPGRADE_MASS_MULTIPLIER = 0.1 // This is additive, so upgrades engines have 10% more mass than baseline
	
		TO_HYDROLOX_ISP = 1.2877 // Engines which are converted from Kerolox to Hydrolox will have their ISP increased 35% if not individually configured
		TO_HYDROLOX_THRUST = 0.95 // Engines which are converted from Kerolox to Hydrolox will have their Thrust increased 8% if not individually configured
		TO_HYDROLOX_COST = 0.35 // Engines which are converted from Kerolox to Hydrolox cost an additional 35%
		TO_HYDROLOX_MASS = 0.00 // Engines which are converted from Kerolox to Hydrolox have an additional 0% mass
		
		TO_METHALOX_ISP = 1.0685 // Engines which are converted from Kerolox to Methalox
		TO_METHALOX_THRUST = 0.98 // Engines which are converted from Kerolox to Methalox
		TO_METHALOX_COST = 0.15 // Engines which are converted from Kerolox to Methalox cost an additional 15%
		TO_METHALOX_MASS = 0.00 // Engines which are converted from Kerolox to Methalox have an additional 0% mass
		
		TO_HYPERGOLIC_ISP = 0.9018 // Engines which are converted from Kerolox to Hypergolic
		TO_HYPERGOLIC_THRUST = 1.05 // Engines which are converted from Kerolox to Hypergolic
		TO_HYPERGOLIC_COST = -0.35 // Engines which are converted from Kerolox to Hydrolox cost 35% less.
		TO_HYPERGOLIC_MASS = 0.00 // Engines which are converted from Kerolox to Hypergolic have an additional 0% mass
	}
	
	HYDROLOX // This is for standard LH2 Fuel Engines, but we currently have Methalox variants available for all hydrolox
	{
		PROTOTYPE_THRUST_MULTIPLIER = 0.9
		PROTOTYPE_ISP_MULTIPLIER = 0.94
		PROTOTYPE_COST_MULTIPLIER = 0.0 // This is additive, so prototype engines cost 0% more than baseline
		PROTOTYPE_MASS_MULTIPLIER = 0.02 // This is additive, so prototype engines have 2% more mass than baseline
	
		BASELINE_ENTRYCOST_MULTIPLIER = 1.0 // This is the cost multiplier for the prototype relative to the original entry cost of the part.
		BASELINE_THRUST_MULTIPLIER = 1.0
		BASELINE_ISP_MULTIPLIER = 1.0
		
		UPGRADE_ENTRYCOST_MULTIPLIER = 1.5 // This is the cost multiplier for the upgrade relative to the original entry cost of the part.
		UPGRADE_THRUST_MULTIPLIER = 1.15 // This gives the engine 15% additional thrust when upgraded.
		UPGRADE_ISP_MULTIPLIER = 1.08 // This gives the engine 8% higher specific impulse when upgraded.
		UPGRADE_COST_MULTIPLIER = 0.5 // This is additive, so upgrades engines cost 50% more than baseline
		UPGRADE_MASS_MULTIPLIER = 0.1 // This is additive, so upgrades engines have 10% more mass than baseline
		
		TO_KEROLOX_ISP = 0.7766 // Engines which are converted from Kerolox to Hydrolox will have their ISP increased 35% if not individually configured
		TO_KEROLOX_THRUST = 1.0526 // Engines which are converted from Kerolox to Hydrolox will have their Thrust increased 8% if not individually configured
		TO_KEROLOX_COST = -0.35 // Engines which are converted from Kerolox to Hydrolox cost an additional 35%
		TO_KEROLOX_MASS = 0.00 // Engines which are converted from Kerolox to Hydrolox have an additional 0% mass
		
		TO_METHALOX_ISP = 0.8298 // Engines which are converted from Kerolox to Methalox
		TO_METHALOX_THRUST = 1.032 // Engines which are converted from Kerolox to Methalox
		TO_METHALOX_COST = -0.20 // Engines which are converted from Kerolox to Methalox cost an additional 15%
		TO_METHALOX_MASS = 0.00 // Engines which are converted from Kerolox to Methalox have an additional 0% mass
		
		TO_HYPERGOLIC_ISP = 0.7003 // Engines which are converted from Kerolox to Hypergolic
		TO_HYPERGOLIC_THRUST = 1.1053 // Engines which are converted from Kerolox to Hypergolic
		TO_HYPERGOLIC_COST = -0.70 // Engines which are converted from Kerolox to Hydrolox cost 35% less.
		TO_HYPERGOLIC_MASS = 0.00 // Engines which are converted from Kerolox to Hypergolic have an additional 0% mass
	}
	
	METHALOX // This is for standard LH2 Fuel Engines, but we currently have Methalox variants available for all hydrolox
	{
		PROTOTYPE_THRUST_MULTIPLIER = 0.9
		PROTOTYPE_ISP_MULTIPLIER = 0.94
		PROTOTYPE_COST_MULTIPLIER = 0.0 // This is additive, so prototype engines cost 0% more than baseline
		PROTOTYPE_MASS_MULTIPLIER = 0.02 // This is additive, so prototype engines have 2% more mass than baseline
	
		BASELINE_ENTRYCOST_MULTIPLIER = 1.0 // This is the cost multiplier for the prototype relative to the original entry cost of the part.
		BASELINE_THRUST_MULTIPLIER = 1.0
		BASELINE_ISP_MULTIPLIER = 1.0
		
		UPGRADE_ENTRYCOST_MULTIPLIER = 1.5 // This is the cost multiplier for the upgrade relative to the original entry cost of the part.
		UPGRADE_THRUST_MULTIPLIER = 1.15 // This gives the engine 15% additional thrust when upgraded.
		UPGRADE_ISP_MULTIPLIER = 1.08 // This gives the engine 8% higher specific impulse when upgraded.
		UPGRADE_COST_MULTIPLIER = 0.5 // This is additive, so upgrades engines cost 50% more than baseline
		UPGRADE_MASS_MULTIPLIER = 0.1 // This is additive, so upgrades engines have 10% more mass than baseline
		
		TO_KEROLOX_ISP = 0.9359 // Engines which are converted from Kerolox to Hydrolox will have their ISP increased 35% if not individually configured
		TO_KEROLOX_THRUST = 1.0204 // Engines which are converted from Kerolox to Hydrolox will have their Thrust increased 8% if not individually configured
		TO_KEROLOX_COST = -0.15 // Engines which are converted from Kerolox to Hydrolox cost an additional 35%
		TO_KEROLOX_MASS = 0.00 // Engines which are converted from Kerolox to Hydrolox have an additional 0% mass
		
		TO_HYDROLOX_ISP = 1.2051 // Engines which are converted from Kerolox to Methalox
		TO_HYDROLOX_THRUST = 0.9690 // Engines which are converted from Kerolox to Methalox
		TO_HYDROLOX_COST = 0.20 // Engines which are converted from Kerolox to Methalox cost an additional 15%
		TO_HYDROLOX_MASS = 0.00 // Engines which are converted from Kerolox to Methalox have an additional 0% mass
		
		TO_HYPERGOLIC_ISP = 0.8440 // Engines which are converted from Kerolox to Hypergolic
		TO_HYPERGOLIC_THRUST = 1.0714 // Engines which are converted from Kerolox to Hypergolic
		TO_HYPERGOLIC_COST = -0.60 // Engines which are converted from Kerolox to Hydrolox cost 35% less.
		TO_HYPERGOLIC_MASS = 0.00 // Engines which are converted from Kerolox to Hypergolic have an additional 0% mass	
	}
	
	HYPERGOLIC
	{
		PROTOTYPE_THRUST_MULTIPLIER = 0.9
		PROTOTYPE_ISP_MULTIPLIER = 0.94
		PROTOTYPE_COST_MULTIPLIER = 0.0 // This is additive, so prototype engines cost 0% more than baseline
		PROTOTYPE_MASS_MULTIPLIER = 0.02 // This is additive, so prototype engines have 2% more mass than baseline
	
		BASELINE_ENTRYCOST_MULTIPLIER = 1.0 // This is the cost multiplier for the prototype relative to the original entry cost of the part.
		BASELINE_THRUST_MULTIPLIER = 1.0
		BASELINE_ISP_MULTIPLIER = 1.0
		
		UPGRADE_ENTRYCOST_MULTIPLIER = 1.5 // This is the cost multiplier for the upgrade relative to the original entry cost of the part.
		UPGRADE_THRUST_MULTIPLIER = 1.2 // This gives the engine 20% additional thrust when upgraded.
		UPGRADE_ISP_MULTIPLIER = 1.05 // This gives the engine 5% higher specific impulse when upgraded.
		UPGRADE_COST_MULTIPLIER = 0.5 // This is additive, so upgrades engines cost 50% more than baseline
		UPGRADE_MASS_MULTIPLIER = 0.1 // This is additive, so upgrades engines have 10% more mass than baseline
		
		TO_KEROLOX_ISP = 1.1089 // Engines which are converted from Kerolox to Hydrolox will have their ISP increased 35% if not individually configured
		TO_KEROLOX_THRUST = 0.9524 // Engines which are converted from Kerolox to Hydrolox will have their Thrust increased 8% if not individually configured
		TO_KEROLOX_COST = 0.35 // Engines which are converted from Kerolox to Hydrolox cost an additional 35%
		TO_KEROLOX_MASS = 0.00 // Engines which are converted from Kerolox to Hydrolox have an additional 0% mass
		
		TO_HYDROLOX_ISP = 1.4280 // Engines which are converted from Kerolox to Methalox
		TO_HYDROLOX_THRUST = 0.9047 // Engines which are converted from Kerolox to Methalox
		TO_HYDROLOX_COST = 0.70 // Engines which are converted from Kerolox to Methalox cost an additional 15%
		TO_HYDROLOX_MASS = 0.00 // Engines which are converted from Kerolox to Methalox have an additional 0% mass
		
		TO_METHALOX_ISP = 1.1849 // Engines which are converted from Kerolox to Methalox
		TO_METHALOX_THRUST = 0.9334 // Engines which are converted from Kerolox to Methalox
		TO_METHALOX_COST = 0.60 // Engines which are converted from Kerolox to Methalox cost an additional 15%
		TO_METHALOX_MASS = 0.00 // Engines which are converted from Kerolox to Methalox have an additional 0% mass
	}
	
	
	
	// Kerbal Atomics adds a dual-mode for NERV, but I will not separate out the multipliers
	NUCLEAR // This is for standard NERV Nuclear Engines
	{
		PROTOTYPE_THRUST_MULTIPLIER = 0.9
		PROTOTYPE_ISP_MULTIPLIER = 0.94
		PROTOTYPE_COST_MULTIPLIER = 0.5 // This is additive, so prototype engines cost 50% more than baseline
		PROTOTYPE_MASS_MULTIPLIER = 0.1 // This is additive, so prototype engines have 10% more mass than baseline
	
		BASELINE_ENTRYCOST_MULTIPLIER = 1.0 // This is the cost multiplier for the prototype relative to the original entry cost of the part.
		BASELINE_THRUST_MULTIPLIER = 1.0
		BASELINE_ISP_MULTIPLIER = 1.0
		
		UPGRADE_ENTRYCOST_MULTIPLIER = 1.5 // This is the cost multiplier for the upgrade relative to the original entry cost of the part.
		UPGRADE_THRUST_MULTIPLIER = 1.2 // This gives the engine 20% additional thrust when upgraded.
		UPGRADE_ISP_MULTIPLIER = 1.05 // This gives the engine 5% higher specific impulse when upgraded.
		UPGRADE_COST_MULTIPLIER = 0.5 // This is additive, so upgrades engines cost 50% more than baseline
		UPGRADE_MASS_MULTIPLIER = 0.1 // This is additive, so upgrades engines have 10% more mass than baseline
	}
	
	JET // This is for standard and dual-mode (ie. afterburners) Liquid Fuel Jet Engines
	{
		PROTOTYPE_THRUST_MULTIPLIER = 0.95
		PROTOTYPE_ISP_MULTIPLIER = 0.80
		PROTOTYPE_COST_MULTIPLIER = 0.0 // This is additive, so prototype engines cost 0% more than baseline
		PROTOTYPE_MASS_MULTIPLIER = 0.01 // This is additive, so prototype engines have 2% more mass than baseline
	
		BASELINE_ENTRYCOST_MULTIPLIER = 1.0 // This is the cost multiplier for the prototype relative to the original entry cost of the part.
		BASELINE_THRUST_MULTIPLIER = 1.0
		BASELINE_ISP_MULTIPLIER = 1.0
		
		UPGRADE_ENTRYCOST_MULTIPLIER = 1.5 // This is the cost multiplier for the upgrade relative to the original entry cost of the part.
		UPGRADE_THRUST_MULTIPLIER = 1.15 // This gives the engine 15% additional thrust when upgraded.
		UPGRADE_ISP_MULTIPLIER = 1.01 // This gives the engine 1% higher specific impulse when upgraded.
		UPGRADE_COST_MULTIPLIER = 0.5 // This is additive, so upgrades engines cost 50% more than baseline
		UPGRADE_MASS_MULTIPLIER = 0.05 // This is additive, so upgrades engines have 5% more mass than baseline
	}
	
	XENON // This is for standard Ion Engines
	{
		PROTOTYPE_THRUST_MULTIPLIER = 1.00 // They are slow enough.
		PROTOTYPE_ISP_MULTIPLIER = 0.80
		PROTOTYPE_COST_MULTIPLIER = 0.0 // This is additive, so prototype engines cost 0% more than baseline
		PROTOTYPE_MASS_MULTIPLIER = 0.01 // This is additive, so prototype engines have 2% more mass than baseline
	
		BASELINE_ENTRYCOST_MULTIPLIER = 1.0 // This is the cost multiplier for the prototype relative to the original entry cost of the part.
		BASELINE_THRUST_MULTIPLIER = 1.0
		BASELINE_ISP_MULTIPLIER = 1.0
		
		UPGRADE_ENTRYCOST_MULTIPLIER = 1.5 // This is the cost multiplier for the upgrade relative to the original entry cost of the part.
		UPGRADE_THRUST_MULTIPLIER = 1.15 // This gives the engine 15% additional thrust when upgraded.
		UPGRADE_ISP_MULTIPLIER = 1.05 // This gives the engine 5% higher specific impulse when upgraded.
		UPGRADE_COST_MULTIPLIER = 1.0 // This is additive, so upgrades engines cost 100% more than baseline
		UPGRADE_MASS_MULTIPLIER = 0.05 // This is additive, so upgrades engines have 5% more mass than baseline		
	}
	
	ARGON // This is for standard Ion Engines
	{
		PROTOTYPE_THRUST_MULTIPLIER = 1.00 // They are slow enough.
		PROTOTYPE_ISP_MULTIPLIER = 0.80
		PROTOTYPE_COST_MULTIPLIER = 0.0 // This is additive, so prototype engines cost 0% more than baseline
		PROTOTYPE_MASS_MULTIPLIER = 0.01 // This is additive, so prototype engines have 2% more mass than baseline
	
		BASELINE_ENTRYCOST_MULTIPLIER = 1.0 // This is the cost multiplier for the prototype relative to the original entry cost of the part.
		BASELINE_THRUST_MULTIPLIER = 1.0
		BASELINE_ISP_MULTIPLIER = 1.0
		
		UPGRADE_ENTRYCOST_MULTIPLIER = 1.5 // This is the cost multiplier for the upgrade relative to the original entry cost of the part.
		UPGRADE_THRUST_MULTIPLIER = 1.15 // This gives the engine 15% additional thrust when upgraded.
		UPGRADE_ISP_MULTIPLIER = 1.05 // This gives the engine 5% higher specific impulse when upgraded.
		UPGRADE_COST_MULTIPLIER = 1.0 // This is additive, so upgrades engines cost 100% more than baseline
		UPGRADE_MASS_MULTIPLIER = 0.05 // This is additive, so upgrades engines have 5% more mass than baseline		
	}
	
	LITHIUM // This is for standard Ion Engines
	{
		PROTOTYPE_THRUST_MULTIPLIER = 1.00 // They are slow enough.
		PROTOTYPE_ISP_MULTIPLIER = 0.80
		PROTOTYPE_COST_MULTIPLIER = 0.0 // This is additive, so prototype engines cost 0% more than baseline
		PROTOTYPE_MASS_MULTIPLIER = 0.01 // This is additive, so prototype engines have 2% more mass than baseline
	
		BASELINE_ENTRYCOST_MULTIPLIER = 1.0 // This is the cost multiplier for the prototype relative to the original entry cost of the part.
		BASELINE_THRUST_MULTIPLIER = 1.0
		BASELINE_ISP_MULTIPLIER = 1.0
		
		UPGRADE_ENTRYCOST_MULTIPLIER = 1.5 // This is the cost multiplier for the upgrade relative to the original entry cost of the part.
		UPGRADE_THRUST_MULTIPLIER = 1.15 // This gives the engine 15% additional thrust when upgraded.
		UPGRADE_ISP_MULTIPLIER = 1.05 // This gives the engine 5% higher specific impulse when upgraded.
		UPGRADE_COST_MULTIPLIER = 1.0 // This is additive, so upgrades engines cost 100% more than baseline
		UPGRADE_MASS_MULTIPLIER = 0.05 // This is additive, so upgrades engines have 5% more mass than baseline		
	}
	
	HYBRID // This is for R.A.P.I.E.R. Style Engines
	{
		PROTOTYPE_THRUST_MULTIPLIER = 0.90
		PROTOTYPE_ISP_MULTIPLIER = 0.94
		PROTOTYPE_COST_MULTIPLIER = 0.0 // This is additive, so prototype engines cost 0% more than baseline
		PROTOTYPE_MASS_MULTIPLIER = 0.10 // This is additive, so prototype engines have 10% more mass than baseline
	
		BASELINE_ENTRYCOST_MULTIPLIER = 1.5 // This is the cost multiplier for the prototype relative to the original entry cost of the part.
		BASELINE_THRUST_MULTIPLIER = 1.0
		BASELINE_ISP_MULTIPLIER = 1.0
		
		UPGRADE_ENTRYCOST_MULTIPLIER = 2.0 // This is the cost multiplier for the upgrade relative to the original entry cost of the part.
		UPGRADE_THRUST_MULTIPLIER = 1.15 // This gives the engine 15% additional thrust when upgraded.
		UPGRADE_ISP_MULTIPLIER = 1.08 // This gives the engine 8% higher specific impulse when upgraded.
		UPGRADE_COST_MULTIPLIER = 1.0 // This is additive, so upgrades engines cost 100% more than baseline
		UPGRADE_MASS_MULTIPLIER = 0.10 // This is additive, so upgrades engines have 10% more mass than baseline	
	}
	
	OTHER // This is for some exotic future fuel types not elsewhere specified
	{
		PROTOTYPE_THRUST_MULTIPLIER = 0.9
		PROTOTYPE_ISP_MULTIPLIER = 0.94
		PROTOTYPE_COST_MULTIPLIER = 0.0 // This is additive, so prototype engines cost 0% more than baseline
		PROTOTYPE_MASS_MULTIPLIER = 0.02 // This is additive, so prototype engines have 2% more mass than baseline
	
		BASELINE_ENTRYCOST_MULTIPLIER = 1.0 // This is the cost multiplier for the prototype relative to the original entry cost of the part.
		BASELINE_THRUST_MULTIPLIER = 1.0
		BASELINE_ISP_MULTIPLIER = 1.0
		
		UPGRADE_ENTRYCOST_MULTIPLIER = 1.5 // This is the cost multiplier for the upgrade relative to the original entry cost of the part.
		UPGRADE_THRUST_MULTIPLIER = 1.15 // This gives the engine 15% additional thrust when upgraded.
		UPGRADE_ISP_MULTIPLIER = 1.08 // This gives the engine 10% higher specific impulse when upgraded.
		UPGRADE_COST_MULTIPLIER = 0.5 // This is additive, so upgrades engines cost 50% more than baseline
		UPGRADE_MASS_MULTIPLIER = 0.1 // This is additive, so upgrades engines have 10% more mass than baseline
	}
	
	
	NUCLEARJET // This is for standard Nuclear Jet Engines
	{
		THRUST_MULTIPLIER = 1.2 // This gives the engine 20% additional thrust when upgraded.
		ISP_MULTIPLIER = 1.0 // This gives the engine 10% higher specific impulse when upgraded.
		
		UPGRADE_ENTRYCOST_MULTIPLIER = 1.5 // This is the cost multiplier for the upgrade relative to the original entry cost of the part.
		UPGRADE_COST_MULTIPLIER = 0.5 // This is additive, so upgrades engines cost 50% more than baseline
		UPGRADE_MASS_MULTIPLIER = 0.05 // This is additive, so upgrades engines have 10% more mass than baseline		
	}
	
		
}

KIWI_PARACHUTE_MULTIPLIERS
{
	STANDARD // This is for parachutes, don't think will have another for simplicity
	{
		UPGRADE_COST_MULTIPLIER = 1.0 // This is additive, so upgraded parachutes cost 100% more than baseline
		UPGRADE_MASS_MULTIPLIER = 0.5 // This is the share of the base mass, so upgrades parachutes have 50% less mass than baseline.
	}
}


KIWI_THERMAL_MULTIPLIERS
{
	THERMALTOLERANCE // Similar to SPACECAPABLE, but for command pods
	{
		UPGRADE_HEAT_MULTIPLIER = 1.3 // By default, this upgrade will not lower the max temp at baseline of configured part. This is additive, so 30% tolerance will be added.
		UPGRADE_COST_MULTIPLIER = 1.1 // This is additive, so upgraded parts will cost 10% more than baseline.
		UPGRADE_MASS_MULTIPLIER = 1.05 // This is additive, so upgraded parts will mass 5% more than baseline.
	}
}

		
KIWI_SYSTEM_MULTIPLIERS
{
	SPACECAPABLE // This is for cockpits space capability (ie. skin max temperature)
	{
		UPGRADE_COST_MULTIPLIER = 0.3 // This is additive, so upgraded cockpits cost 30% more than baseline drymass cost
		BASE_MASS_MULTIPLIER = 0.95 // Cockpits that are not space capable have their mass reduced by 5%
		UPGRADE_MASS_MULTIPLIER = 0.05263 // This is additive, so space-capable cockpits weigh 5.263% more than baseline, leaving them at stock values due to non-space-capable weight reduction.
	}
	SYSTEM // This is for the various spaceplane systems that have a standardized upgrade (ie. Mk1 through Mk3)
	{
		UPGRADE_COST_MULTIPLIER = 0.5 // This is additive, so upgraded spaceplane parts cost 50% more than baseline dry mass cost
		UPGRADE_MASS_MULTIPLIER = 0.20 // Upgraded spaceplane parts have 20% reduced dry mass than baseline
	}
}


KIWI_STRUCTURAL_MULTIPLIERS
{
	STRUCTURAL // This is for standard structural parts
	{
		UPGRADE_COST_MULTIPLIER = 0.5 // Upgraded structural parts cost 50% more than baseline drymass cost
		UPGRADE_MASS_MULTIPLIER = 0.20 // Upgraded structural parts have 20% reduced dry mass than baseline
	}
}

KIWI_FUELTANK_MULTIPLIERS
{
	LIQUIDFUEL // This is for standard liquid fuel tanks
	{
		UPGRADE_COST_MULTIPLIER = 0.5 // Upgraded fuel tanks cost 50% more than baseline drymass cost
		UPGRADE_MASS_MULTIPLIER = 0.20 // Upgraded fuel tanks have 20% less dry mass than baseline
	}
	MONOPROPELLANT // This is for standard monopropellant fuel tanks
	{
		UPGRADE_COST_MULTIPLIER = 0.5 // Upgraded MonoProp fuel tanks cost 50% more than baseline drymass cost
		UPGRADE_MASS_MULTIPLIER = 0.20 // Upgraded MonoProp fuel tanks have 20% less dry mass than baseline
	}
	SOLIDROCKETBOOSTER
	{
		UPGRADE_COST_MULTIPLIER = 1.5 // Upgraded SRBs cost 150% more than baseline drymass cost
		UPGRADE_MASS_MULTIPLIER = 0.30 // Upgraded SRBs weigh 30% less dry mass than baseline
	}
	ORE
	{
		UPGRADE_COST_MULTIPLIER = 0.5 // Upgraded ore tanks cost 50% more than baseline drymass cost
		UPGRADE_MASS_MULTIPLIER = 0.20 // Upgraded ore tanks weigh 20% less dry mass than baseline
	}
	ARGON
	{
		UPGRADE_COST_MULTIPLIER = 0.5 // Upgraded argon tanks cost 50% more than baseline drymass cost
		UPGRADE_MASS_MULTIPLIER = 0.20 // Upgraded argon tanks weigh 20% less dry mass than baseline
	}
	LITHIUM
	{
		UPGRADE_COST_MULTIPLIER = 0.5 // Upgraded lithium tanks cost 50% more than baseline drymass cost
		UPGRADE_MASS_MULTIPLIER = 0.20 // Upgraded lithium tanks weigh 20% less dry mass than baseline
	}
	XENON
	{
		UPGRADE_COST_MULTIPLIER = 0.5 // Upgraded xenon tanks cost 50% more than baseline drymass cost
		UPGRADE_MASS_MULTIPLIER = 0.20 // Upgraded xenon tanks weigh 20% less dry mass than baseline
	}
}

KIWI_SOLAR_MULTIPLIERS
{
	BASIC
	{
		UPGRADE_COST_MULTIPLIER = 0.0
		UPGRADE_MASS_MULTIPLIER = 0.0
		UPGRADE_CHARGERATE_MULTIPLIER = 1.0
	}
	ADVANCED
	{
		UPGRADE_COST_MULTIPLIER = 1.1
		UPGRADE_MASS_MULTIPLIER = 0.0
		UPGRADE_CHARGERATE_MULTIPLIER = 1.3
	}
	CONCENTRATING
	{
		UPGRADE_COST_MULTIPLIER = 2.1
		UPGRADE_MASS_MULTIPLIER = 0.0
		UPGRADE_CHARGERATE_MULTIPLIER = 1.75
	}
	EXPERIMENTAL
	{
		UPGRADE_COST_MULTIPLIER = 3.1
		UPGRADE_MASS_MULTIPLIER = 0.0
		UPGRADE_CHARGERATE_MULTIPLIER = 2.5
	}
}

KIWI_COST_MULTIPLIERS // These are currently experimental and are not yet implemented
{
    ACTUATORS
    {
        COST_MULTIPLIER = 1.0
        ENTRYCOST_MULTIPLIER = 1.0
    }
    ADAPTERSETAL
    {
        COST_MULTIPLIER = 1.0
        ENTRYCOST_MULTIPLIER = 1.0
    }
    ANTENNA
    {
        COST_MULTIPLIER = 1.0
        ENTRYCOST_MULTIPLIER = 1.0
    }
    BATTERIES
    {
        COST_MULTIPLIER = 1.0
        ENTRYCOST_MULTIPLIER = 1.0
    }
    BEAMEDPOWER
    {
        COST_MULTIPLIER = 1.0
        ENTRYCOST_MULTIPLIER = 1.0
    }
    COCKPITS
    {
        COST_MULTIPLIER = 1.0
        ENTRYCOST_MULTIPLIER = 1.0
    }
    COMMANDMODULES
    {
        COST_MULTIPLIER = 1.0
        ENTRYCOST_MULTIPLIER = 1.0
    }
    COMMANDMODULESEXTENSIONS
    {
        COST_MULTIPLIER = 1.0
        ENTRYCOST_MULTIPLIER = 1.0
    }
    CRYOENGINES
    {
        COST_MULTIPLIER = 1.0
        ENTRYCOST_MULTIPLIER = 1.0
    }
    DECOUPLERS
    {
        COST_MULTIPLIER = 1.0
        ENTRYCOST_MULTIPLIER = 1.0
    }
    DRONECORE
    {
        COST_MULTIPLIER = 1.0
        ENTRYCOST_MULTIPLIER = 1.0
    }
    HYPERGOLICENGINES
    {
        COST_MULTIPLIER = 1.0
        ENTRYCOST_MULTIPLIER = 1.0
    }
    IONENGINES
    {
        COST_MULTIPLIER = 1.0
        ENTRYCOST_MULTIPLIER = 1.0
    }
    JETENGINES
    {
        COST_MULTIPLIER = 1.0
        ENTRYCOST_MULTIPLIER = 1.0
    }
    JETPARTS
    {
        COST_MULTIPLIER = 1.0
        ENTRYCOST_MULTIPLIER = 1.0
    }
    LADDERSLIGHTS
    {
        COST_MULTIPLIER = 1.0
        ENTRYCOST_MULTIPLIER = 1.0
    }
    LANDINGGEAR
    {
        COST_MULTIPLIER = 1.0
        ENTRYCOST_MULTIPLIER = 1.0
    }
    KEROLOXENGINES
    {
        COST_MULTIPLIER = 1.0
        ENTRYCOST_MULTIPLIER = 1.0
    }
    LIQUIDFUELTANKS
    {
        COST_MULTIPLIER = 1.0
        ENTRYCOST_MULTIPLIER = 1.0
    }
    MONOPROPELLANTTANKS
    {
        COST_MULTIPLIER = 1.0
        ENTRYCOST_MULTIPLIER = 1.0
    }
    IONTANKS
    {
        COST_MULTIPLIER = 1.0
        ENTRYCOST_MULTIPLIER = 1.0
    }
    NUCLEARTANKS
    {
        COST_MULTIPLIER = 1.0
        ENTRYCOST_MULTIPLIER = 1.0
    }
    NUCLEARPOWER
    {
        COST_MULTIPLIER = 1.0
        ENTRYCOST_MULTIPLIER = 1.0
    }
    NUCLEARENGINES
    {
        COST_MULTIPLIER = 1.0
        ENTRYCOST_MULTIPLIER = 1.0
    }
    OTHER
    {
        COST_MULTIPLIER = 1.0
        ENTRYCOST_MULTIPLIER = 1.0
    }
    PARACHUTES
    {
        COST_MULTIPLIER = 1.0
        ENTRYCOST_MULTIPLIER = 1.0
    }
    PLASMAENGINES
    {
        COST_MULTIPLIER = 1.0
        ENTRYCOST_MULTIPLIER = 1.0
    }
    PROBES
    {
        COST_MULTIPLIER = 1.0
        ENTRYCOST_MULTIPLIER = 1.0
    }
    RESOURCEDETECTION
    {
        COST_MULTIPLIER = 1.0
        ENTRYCOST_MULTIPLIER = 1.0
    }
    RCSETAL
    {
        COST_MULTIPLIER = 1.0
        ENTRYCOST_MULTIPLIER = 1.0
    }
    REENTRYPODS
    {
        COST_MULTIPLIER = 1.0
        ENTRYCOST_MULTIPLIER = 1.0
    }
    ROTORS
    {
        COST_MULTIPLIER = 1.0
        ENTRYCOST_MULTIPLIER = 1.0
    }
    SCIENCE
    {
        COST_MULTIPLIER = 1.0
        ENTRYCOST_MULTIPLIER = 1.0
    }
    SOLARPLANELS
    {
        COST_MULTIPLIER = 1.0
        ENTRYCOST_MULTIPLIER = 1.0
    }
    SRBS
    {
        COST_MULTIPLIER = 1.0
        ENTRYCOST_MULTIPLIER = 1.0
    }
    SPECIALTYENGINES
    {
        COST_MULTIPLIER = 1.0
        ENTRYCOST_MULTIPLIER = 1.0
    }
    SPECIALTYFUEL
    {
        COST_MULTIPLIER = 1.0
        ENTRYCOST_MULTIPLIER = 1.0
    }
    STATIONPARTS
    {
        COST_MULTIPLIER = 1.0
        ENTRYCOST_MULTIPLIER = 1.0
    }
    STATIONCOLONY
    {
        COST_MULTIPLIER = 1.0
        ENTRYCOST_MULTIPLIER = 1.0
    }
    STORAGERESOURCES
    {
        COST_MULTIPLIER = 1.0
        ENTRYCOST_MULTIPLIER = 1.0
    }
    THERMALHEATSHIELDS
    {
        COST_MULTIPLIER = 1.0
        ENTRYCOST_MULTIPLIER = 1.0
    }
    UNRESEARCHABLE
    {
        COST_MULTIPLIER = 1.0
        ENTRYCOST_MULTIPLIER = 1.0
    }
}
